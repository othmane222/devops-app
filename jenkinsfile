pipeline {
    agent any 

    tools {
        maven 'maven' 
        // dependencyCheck 'Default'
    }

    environment {
        DOCKER_REGISTRY = 'https://index.docker.io/v1/' 
        DOCKER_IMAGE_NAME = 'othmanemaarad442/devops-app'
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'
        SSH_CREDENTIALS_ID = 'services-vm-ssh-key'
        SERVICES_VM_IP = '192.168.252.139' 
        SERVICES_VM_USER = 'services'
    }

    stages {
        stage('1. Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('2. Build & Test') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('3. SonarQube Analysis (SAST)') {
            steps {
                // withCredentials injecte le contenu du credential 'sonarqube-auth-token'
                // dans une variable d'environnement nommée SONAR_TOKEN
                withCredentials([string(credentialsId: 'sonarqube-auth-token', variable: 'SONAR_TOKEN')]) {
                    withSonarQubeEnv('SonarQube') {
                        // Utilise la variable d'environnement qui vient d'être créée
                        sh "mvn clean verify sonar:sonar -Dsonar.login=${env.SONAR_TOKEN}"
                    }
                }
            }
        }

        stage('4. Quality Gate') {
            steps {
                // Met le pipeline en pause en attendant le verdict de SonarQube
                // Si la "Quality Gate" échoue dans SonarQube, le pipeline s'arrêtera ici.
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        
        stage('5. Security Scan (SCA)') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --format ALL --failOnCVSS 7', odcInstallation: 'Default'
                
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        

        stage('6. Build & Push Docker Image') {
            steps {
                script {
                    def imageTag = "v${env.BUILD_NUMBER}"
                    
                    def dockerImage = docker.build("${env.DOCKER_IMAGE_NAME}:${imageTag}", '.')

                    docker.withRegistry(env.DOCKER_REGISTRY, env.DOCKER_CREDENTIALS_ID) {
                        dockerImage.push()

                        dockerImage.push('latest')
                    }
                }
            }
        }
        
        stage('7. Deploy to Production') {
            steps {
                script {
                    def newImageTag = "v${env.BUILD_NUMBER}"

                    sshagent(credentials: [SSH_CREDENTIALS_ID]) {

                        sh '''
                            ssh -o StrictHostKeyChecking=no ${SERVICES_VM_USER}@${SERVICES_VM_IP} \
                            "echo '--- Connexion réussie à la VM de services ---'"
                        '''

                        sh """
                            ssh -o StrictHostKeyChecking=no ${env.SERVICES_VM_USER}@${env.SERVICES_VM_IP} \
                            "echo \\"--- Mise à jour de l'image vers ${env.DOCKER_IMAGE_NAME}:${newImageTag} ---\\" && \
                            sed -i 's|image: .*|image: ${env.DOCKER_IMAGE_NAME}:${newImageTag}|g' ~/app-stack/docker-compose.yaml"
                        """

                        sh '''
                            ssh -o StrictHostKeyChecking=no ${SERVICES_VM_USER}@${SERVICES_VM_IP} \
                            "cd ~/app-stack && echo '--- Arrêt des conteneurs ---' && docker-compose down"
                        '''

                        sh '''
                            ssh -o StrictHostKeyChecking=no ${SERVICES_VM_USER}@${SERVICES_VM_IP} \
                            "cd ~/app-stack && echo '--- Démarrage des conteneurs avec la nouvelle image ---' && docker-compose up -d"
                        '''

                        sh '''
                            ssh -o StrictHostKeyChecking=no ${SERVICES_VM_USER}@${SERVICES_VM_IP} \
                            "echo '--- Déploiement terminé ---'"
                        '''
                    }
                }
            }
        }


    }
}